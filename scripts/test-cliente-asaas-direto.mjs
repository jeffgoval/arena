import { config } from 'dotenv';
import { resolve } from 'path';
import axios from 'axios';

// Carregar vari√°veis de ambiente
config({ path: resolve(process.cwd(), '.env.local') });
config({ path: resolve(process.cwd(), '.env') });

console.log('üîç Testando cria√ß√£o de cliente Asaas diretamente\n');

const apiKey = process.env.ASAAS_API_KEY;
const environment = process.env.ASAAS_ENVIRONMENT;

console.log('Configura√ß√£o:');
console.log('  API Key:', apiKey ? `‚úÖ ${apiKey.length} caracteres` : '‚ùå N√£o configurada');
console.log('  Ambiente:', environment || '‚ùå N√£o definido');
console.log('  Primeiros caracteres:', apiKey?.substring(0, 20) || 'N/A');
console.log();

if (!apiKey) {
  console.log('‚ùå ASAAS_API_KEY n√£o est√° configurada!');
  process.exit(1);
}

const baseURL = environment === 'production'
  ? 'https://www.asaas.com/api/v3'
  : 'https://sandbox.asaas.com/api/v3';

console.log('üåê Base URL:', baseURL);
console.log();

// Dados de teste do cliente (dados m√≠nimos obrigat√≥rios)
const clienteTesteDados = {
  name: 'Cliente Teste Debug ' + Date.now(),
  email: `teste-${Date.now()}@example.com`,
  cpfCnpj: '24971563792' // CPF v√°lido de teste
};

console.log('üìù Tentando criar cliente com dados:');
console.log(JSON.stringify(clienteTesteDados, null, 2));
console.log();

try {
  const response = await axios.post(
    `${baseURL}/customers`,
    clienteTesteDados,
    {
      headers: {
        'access_token': apiKey,
        'Content-Type': 'application/json'
      },
      timeout: 30000
    }
  );

  console.log('‚úÖ Cliente criado com sucesso!');
  console.log('   ID:', response.data.id);
  console.log('   Nome:', response.data.name);
  console.log('   Email:', response.data.email);
  console.log('   CPF:', response.data.cpfCnpj);
  console.log();
  console.log('üìÑ Resposta completa:');
  console.log(JSON.stringify(response.data, null, 2));

} catch (error) {
  console.log('‚ùå Erro ao criar cliente:\n');

  if (error.response) {
    // Erro da API
    console.log('Status:', error.response.status);
    console.log('Dados do erro:');
    console.log(JSON.stringify(error.response.data, null, 2));

    if (error.response.status === 401) {
      console.log('\n‚ö†Ô∏è  Erro 401: API Key inv√°lida ou expirada');
      console.log('   - Verifique se a chave est√° correta');
      console.log('   - Verifique se n√£o est√° usando uma chave de produ√ß√£o no sandbox');
    } else if (error.response.status === 400) {
      console.log('\n‚ö†Ô∏è  Erro 400: Dados inv√°lidos');
      console.log('   - Verifique se o CPF est√° correto');
      console.log('   - Verifique se o email est√° no formato correto');
    }
  } else if (error.request) {
    // Erro de rede
    console.log('‚ùå Erro de rede - sem resposta do servidor');
    console.log('Detalhes:', error.message);
  } else {
    // Outro erro
    console.log('‚ùå Erro:', error.message);
  }

  console.log('\nüìã Stack trace:');
  console.log(error.stack);
}
