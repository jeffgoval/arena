#!/usr/bin/env node

/**
 * Script de teste para o sistema de notifica√ß√µes
 * Testa todas as funcionalidades principais
 */

const https = require('https');
const http = require('http');

// Configura√ß√µes
const config = {
  baseUrl: process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000',
  cronToken: process.env.CRON_SECRET_TOKEN || 'test-token',
  telefoneTest: process.env.TELEFONE_TESTE || '5511999999999'
};

console.log('üß™ Iniciando testes do sistema de notifica√ß√µes...\n');

// Fun√ß√£o para fazer requisi√ß√µes HTTP
function makeRequest(url, method = 'GET', data = null, headers = {}) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const isHttps = urlObj.protocol === 'https:';
    const client = isHttps ? https : http;

    const options = {
      hostname: urlObj.hostname,
      port: urlObj.port || (isHttps ? 443 : 80),
      path: urlObj.pathname + urlObj.search,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        ...headers
      }
    };

    const req = client.request(options, (res) => {
      let responseData = '';

      res.on('data', (chunk) => {
        responseData += chunk;
      });

      res.on('end', () => {
        try {
          const parsedData = JSON.parse(responseData);
          resolve({
            statusCode: res.statusCode,
            data: parsedData
          });
        } catch (error) {
          resolve({
            statusCode: res.statusCode,
            data: { message: responseData }
          });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }

    req.end();
  });
}

// Teste 1: Listar templates
async function testarListarTemplates() {
  console.log('üìã Teste 1: Listar templates');
  
  try {
    const response = await makeRequest(`${config.baseUrl}/api/notificacoes/templates`);
    
    if (response.statusCode === 200) {
      console.log('‚úÖ Templates listados com sucesso');
      console.log(`   - ${response.data.templates?.length || 0} templates encontrados`);
      
      if (response.data.templates) {
        response.data.templates.forEach(template => {
          console.log(`   - ${template.tipo}: ${template.titulo} (${template.ativo ? 'Ativo' : 'Inativo'})`);
        });
      }
    } else {
      console.log('‚ùå Erro ao listar templates:', response.data);
    }
  } catch (error) {
    console.log('‚ùå Erro na requisi√ß√£o:', error.message);
  }
  
  console.log('');
}

// Teste 2: Testar template
async function testarTemplate() {
  console.log('üß™ Teste 2: Testar template');
  
  try {
    const dadosTeste = {
      tipo: 'lembrete_45min',
      telefone: config.telefoneTest,
      dadosTeste: {
        quadra: 'Quadra A - Teste',
        data: '25/10/2024',
        horario: '20:00',
        participantes: 4
      }
    };

    const response = await makeRequest(
      `${config.baseUrl}/api/notificacoes/testar`,
      'POST',
      dadosTeste
    );
    
    if (response.statusCode === 200) {
      console.log('‚úÖ Template testado com sucesso');
      console.log(`   - Mensagem enviada para: ${config.telefoneTest}`);
    } else {
      console.log('‚ùå Erro ao testar template:', response.data);
    }
  } catch (error) {
    console.log('‚ùå Erro na requisi√ß√£o:', error.message);
  }
  
  console.log('');
}

// Teste 3: Processar notifica√ß√µes (simulando cron job)
async function testarProcessarNotificacoes() {
  console.log('‚è∞ Teste 3: Processar notifica√ß√µes pendentes');
  
  try {
    const response = await makeRequest(
      `${config.baseUrl}/api/notificacoes/processar`,
      'POST',
      null,
      {
        'Authorization': `Bearer ${config.cronToken}`
      }
    );
    
    if (response.statusCode === 200) {
      console.log('‚úÖ Notifica√ß√µes processadas com sucesso');
      console.log(`   - Timestamp: ${response.data.timestamp}`);
    } else {
      console.log('‚ùå Erro ao processar notifica√ß√µes:', response.data);
    }
  } catch (error) {
    console.log('‚ùå Erro na requisi√ß√£o:', error.message);
  }
  
  console.log('');
}

// Teste 4: Obter estat√≠sticas
async function testarEstatisticas() {
  console.log('üìä Teste 4: Obter estat√≠sticas');
  
  try {
    const dataInicio = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];
    const dataFim = new Date().toISOString().split('T')[0];
    
    const response = await makeRequest(
      `${config.baseUrl}/api/notificacoes/estatisticas?dataInicio=${dataInicio}&dataFim=${dataFim}`
    );
    
    if (response.statusCode === 200) {
      console.log('‚úÖ Estat√≠sticas obtidas com sucesso');
      const stats = response.data.estatisticas;
      console.log(`   - Total: ${stats.total}`);
      console.log(`   - Enviadas: ${stats.enviadas}`);
      console.log(`   - Pendentes: ${stats.pendentes}`);
      console.log(`   - Falharam: ${stats.falharam}`);
      
      if (stats.porTipo && Object.keys(stats.porTipo).length > 0) {
        console.log('   - Por tipo:');
        Object.entries(stats.porTipo).forEach(([tipo, dados]) => {
          console.log(`     * ${tipo}: ${dados.enviadas}/${dados.total} (${dados.taxa.toFixed(1)}%)`);
        });
      }
    } else {
      console.log('‚ùå Erro ao obter estat√≠sticas:', response.data);
    }
  } catch (error) {
    console.log('‚ùå Erro na requisi√ß√£o:', error.message);
  }
  
  console.log('');
}

// Teste 5: Verificar conectividade
async function testarConectividade() {
  console.log('üåê Teste 5: Verificar conectividade');
  
  try {
    const response = await makeRequest(`${config.baseUrl}/api/health`);
    
    if (response.statusCode === 200 || response.statusCode === 404) {
      console.log('‚úÖ Servidor est√° respondendo');
    } else {
      console.log('‚ö†Ô∏è  Servidor respondeu com status:', response.statusCode);
    }
  } catch (error) {
    console.log('‚ùå Erro de conectividade:', error.message);
  }
  
  console.log('');
}

// Executar todos os testes
async function executarTodos() {
  console.log(`üéØ Testando sistema em: ${config.baseUrl}`);
  console.log(`üì± Telefone de teste: ${config.telefoneTest}`);
  console.log(`üîë Token do cron: ${config.cronToken ? 'Configurado' : 'N√£o configurado'}\n`);

  await testarConectividade();
  await testarListarTemplates();
  
  // S√≥ testar envio se o telefone estiver configurado
  if (config.telefoneTest && config.telefoneTest !== '5511999999999') {
    await testarTemplate();
  } else {
    console.log('‚ö†Ô∏è  Pulando teste de envio - configure TELEFONE_TESTE\n');
  }
  
  await testarProcessarNotificacoes();
  await testarEstatisticas();

  console.log('üèÅ Testes conclu√≠dos!');
  console.log('\nüìù Para configurar adequadamente:');
  console.log('1. Configure TELEFONE_TESTE com seu n√∫mero para testar envios');
  console.log('2. Configure CRON_SECRET_TOKEN para autentica√ß√£o');
  console.log('3. Verifique se o servidor est√° rodando');
  console.log('4. Execute a migra√ß√£o do banco de dados');
}

// Verificar argumentos da linha de comando
const args = process.argv.slice(2);

if (args.includes('--help') || args.includes('-h')) {
  console.log('üß™ Script de teste do sistema de notifica√ß√µes\n');
  console.log('Uso: node scripts/test-notificacoes.js [op√ß√µes]\n');
  console.log('Op√ß√µes:');
  console.log('  --templates     Testar apenas templates');
  console.log('  --envio         Testar apenas envio');
  console.log('  --cron          Testar apenas processamento');
  console.log('  --stats         Testar apenas estat√≠sticas');
  console.log('  --help, -h      Mostrar esta ajuda');
  console.log('\nVari√°veis de ambiente:');
  console.log('  NEXT_PUBLIC_APP_URL    URL da aplica√ß√£o (padr√£o: http://localhost:3000)');
  console.log('  CRON_SECRET_TOKEN      Token para autentica√ß√£o do cron');
  console.log('  TELEFONE_TESTE         N√∫mero para teste de envio (formato: 5511999999999)');
  process.exit(0);
}

// Executar testes espec√≠ficos ou todos
if (args.includes('--templates')) {
  testarListarTemplates();
} else if (args.includes('--envio')) {
  testarTemplate();
} else if (args.includes('--cron')) {
  testarProcessarNotificacoes();
} else if (args.includes('--stats')) {
  testarEstatisticas();
} else {
  executarTodos();
}